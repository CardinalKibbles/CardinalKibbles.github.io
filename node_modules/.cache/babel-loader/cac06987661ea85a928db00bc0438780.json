{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    const rotateAnimation = this.options.rotate.animation;\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    const tiltAnimation = this.options.tilt.animation;\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n    const orbitOptions = particlesOptions.orbit;\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n    const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n    const rollOpt = this.options.roll;\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n    const wobbleOpt = this.options.wobble;\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n    this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    if (this.options.move.spin.enable) {\n      const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = Utils_1.getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n    const color = Utils_1.getHslFromAnimation(this.color);\n    if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n      const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        } else if (this.alterType && this.alterValue !== undefined) {\n          return {\n            h: color.h,\n            s: color.s,\n            l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n          };\n        }\n      }\n    }\n    return color;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n      if (colorAnimation.sync) {\n        return;\n      }\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const outMode = this.options.move.outMode;\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const overlapOptions = this.options.collisions.overlap;\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n      let overlaps = false;\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n      return overlaps;\n    }\n    return false;\n  }\n  calculateVelocity() {\n    const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n    return life;\n  }\n}\nexports.Particle = Particle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","orbitOptions","orbit","orbitRotation","rotation","orbitColor","colorToHsl","hslColor","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","alterType","AlterType","alterValue","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","height","pos","getPosition","distance","getDistance","center","angle","radius","acceleration","shadowColor","colorToRgb","shadow","particleInit","plugin","plugins","particleCreated","draw","delta","drawParticlePlugin","drawParticle","getRadius","getMass","pow","getHslFromAnimation","rolled","getStrokeColor","destroy","override","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","count","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","Vector3d","create","canvasSize","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","left","right","straight","length","deepExtend","lifeOptions","delayTime","duration","time"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.getRangeMin(sizeRange);\n            this.size.max = Utils_1.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const orbitOptions = particlesOptions.orbit;\n        if (orbitOptions.enable) {\n            this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n            this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n        }\n        const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                    this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n                    this.alterValue =\n                        this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n                }\n                else if (rollOpt.darken.enable) {\n                    this.alterType = Enums_1.AlterType.darken;\n                    this.alterValue = rollOpt.darken.value;\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.alterType = Enums_1.AlterType.enlighten;\n                    this.alterValue = rollOpt.enlighten.value;\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = Utils_1.getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        const color = Utils_1.getHslFromAnimation(this.color);\n        if (color && (this.backColor || (this.alterType && this.alterValue !== undefined))) {\n            const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                else if (this.alterType && this.alterValue !== undefined) {\n                    return {\n                        h: color.h,\n                        s: color.s,\n                        l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue,\n                    };\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}