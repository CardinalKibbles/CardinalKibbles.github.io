{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nvar Enums_1 = require(\"../Enums\");\nvar Utils_1 = require(\"../Utils\");\nvar Vector_1 = require(\"./Particle/Vector\");\nvar Vector3d_1 = require(\"./Particle/Vector3d\");\nvar Particle = /*#__PURE__*/function () {\n  function Particle(id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    var pxRatio = container.retina.pixelRatio;\n    var options = container.actualOptions;\n    var particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    var zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    var color = this.options.color;\n    var sizeOptions = this.options.size;\n    var sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    var sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      var sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    var rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    var rotateDirection = rotateOptions.direction;\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    var rotateAnimation = this.options.rotate.animation;\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n    var tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    var tiltDirection = tiltOptions.direction;\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      var _index = Math.floor(Math.random() * 2);\n      tiltDirection = _index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n    var tiltAnimation = this.options.tilt.animation;\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n    var orbitOptions = particlesOptions.orbit;\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n    var hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      var colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n    var rollOpt = this.options.roll;\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n    var wobbleOpt = this.options.wobble;\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n    this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    var particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    var opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    var opacityAnimation = opacityOptions.animation;\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      var opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    var strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      var strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    if (this.options.move.spin.enable) {\n      var spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : {\n        x: 50,\n        y: 50\n      };\n      var spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      var pos = this.getPosition();\n      var distance = Utils_1.getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    var _iterator = _createForOfIteratorHelper(container.plugins),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          plugin = _step$value[1];\n        if (plugin.particleCreated) {\n          plugin.particleCreated(this);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  _createClass(Particle, [{\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      return this.bubble.radius || this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      var radius = this.getRadius();\n      return Math.pow(radius, 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      if (this.bubble.color) {\n        return this.bubble.color;\n      }\n      var color = Utils_1.getHslFromAnimation(this.color);\n      if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n        var rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          } else if (this.alterType && this.alterValue !== undefined) {\n            return {\n              h: color.h,\n              s: color.s,\n              l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n            };\n          }\n        }\n      }\n      return color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      if (this.unbreakable) {\n        return;\n      }\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      var _iterator3 = _createForOfIteratorHelper(this.container.plugins),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            plugin = _step3$value[1];\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (override) {\n        return;\n      }\n      var destroyOptions = this.options.destroy;\n      if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.loops.opacity = 0;\n      this.loops.size = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n      var rate = Utils_1.getRangeValue(splitOptions.rate.value);\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"setColorAnimation\",\n    value: function setColorAnimation(colorAnimation, colorValue) {\n      if (colorAnimation.enable) {\n        colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n        if (colorAnimation.sync) {\n          return;\n        }\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.velocity *= Math.random();\n        if (colorValue.value) {\n          colorValue.value *= Math.random();\n        }\n      } else {\n        colorValue.velocity = 0;\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var _a, _b;\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n            plugin = _step4$value[1];\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n          if (pluginPos !== undefined) {\n            return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var canvasSize = container.canvas.size;\n      var pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n      var outMode = this.options.move.outMode;\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n      if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var overlapOptions = this.options.collisions.overlap;\n      if (!overlapOptions.enable) {\n        var retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n          throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        var overlaps = false;\n        var _iterator5 = _createForOfIteratorHelper(this.container.particles.array),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var particle = _step5.value;\n            if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n              overlaps = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return overlaps;\n      }\n      return false;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      var rad = Math.PI / 180 * moveOptions.angle.value;\n      var radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      var range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n      if (!moveOptions.straight) {\n        res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n      return res;\n    }\n  }, {\n    key: \"loadShapeData\",\n    value: function loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n      if (shapeData) {\n        return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n  }, {\n    key: \"loadLife\",\n    value: function loadLife() {\n      var container = this.container;\n      var particlesOptions = this.options;\n      var lifeOptions = particlesOptions.life;\n      var life = {\n        delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n      if (life.duration <= 0) {\n        life.duration = -1;\n      }\n      if (life.count <= 0) {\n        life.count = -1;\n      }\n      return life;\n    }\n  }]);\n  return Particle;\n}();\nexports.Particle = Particle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","orbitOptions","orbit","orbitRotation","rotation","orbitColor","colorToHsl","hslColor","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","alterType","AlterType","alterValue","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","height","pos","getPosition","distance","getDistance","center","angle","radius","acceleration","shadowColor","colorToRgb","shadow","particleInit","plugins","plugin","particleCreated","delta","drawParticlePlugin","drawParticle","getRadius","pow","getHslFromAnimation","rolled","override","particleDestroyed","destroyOptions","destroy","mode","DestroyMode","split","splitOptions","count","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","Vector3d","create","canvasSize","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","array","particle","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","left","right","straight","length","deepExtend","lifeOptions","delayTime","duration","time"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.getRangeMin(sizeRange);\n            this.size.max = Utils_1.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const orbitOptions = particlesOptions.orbit;\n        if (orbitOptions.enable) {\n            this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n            this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n        }\n        const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                    this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n                    this.alterValue =\n                        this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n                }\n                else if (rollOpt.darken.enable) {\n                    this.alterType = Enums_1.AlterType.darken;\n                    this.alterValue = rollOpt.darken.value;\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.alterType = Enums_1.AlterType.enlighten;\n                    this.alterValue = rollOpt.enlighten.value;\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = Utils_1.getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        const color = Utils_1.getHslFromAnimation(this.color);\n        if (color && (this.backColor || (this.alterType && this.alterValue !== undefined))) {\n            const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                else if (this.alterType && this.alterValue !== undefined) {\n                    return {\n                        h: color.h,\n                        s: color.s,\n                        l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue,\n                    };\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}