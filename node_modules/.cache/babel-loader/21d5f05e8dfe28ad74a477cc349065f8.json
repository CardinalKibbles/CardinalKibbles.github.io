{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\nconst Enums_1 = require(\"../../../Enums\");\nconst Utils_1 = require(\"../../../Utils\");\nconst ParticlesInteractorBase_1 = require(\"../../../Core/ParticlesInteractorBase\");\nfunction bounce(p1, p2) {\n  Utils_1.circleBounce(Utils_1.circleBounceDataFromParticle(p1), Utils_1.circleBounceDataFromParticle(p2));\n}\nfunction destroy(p1, p2) {\n  if (!p1.unbreakable && !p2.unbreakable) {\n    bounce(p1, p2);\n  }\n  if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n    p1.destroy();\n  } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n    p2.destroy();\n  } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n    if (p1.getRadius() >= p2.getRadius()) {\n      p2.destroy();\n    } else {\n      p1.destroy();\n    }\n  }\n}\nclass Collider extends ParticlesInteractorBase_1.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n  reset() {}\n  interact(p1) {\n    const container = this.container;\n    const pos1 = p1.getPosition();\n    const radius1 = p1.getRadius();\n    const query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n        continue;\n      }\n      const pos2 = p2.getPosition();\n      if (Math.round(pos1.z) !== Math.round(pos2.z)) {\n        continue;\n      }\n      const dist = Utils_1.getDistance(pos1, pos2);\n      const radius2 = p2.getRadius();\n      const distP = radius1 + radius2;\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  }\n  resolveCollision(p1, p2) {\n    switch (p1.options.collisions.mode) {\n      case Enums_1.CollisionMode.absorb:\n        {\n          this.absorb(p1, p2);\n          break;\n        }\n      case Enums_1.CollisionMode.bounce:\n        {\n          bounce(p1, p2);\n          break;\n        }\n      case Enums_1.CollisionMode.destroy:\n        {\n          destroy(p1, p2);\n          break;\n        }\n    }\n  }\n  absorb(p1, p2) {\n    const container = this.container;\n    const fps = container.fpsLimit / 1000;\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n      p1.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n      p2.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n      if (p1.getRadius() >= p2.getRadius()) {\n        const factor = Utils_1.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n        p1.size.value += factor;\n        p2.size.value -= factor;\n        if (p2.getRadius() <= container.retina.pixelRatio) {\n          p2.size.value = 0;\n          p2.destroy();\n        }\n      } else {\n        const factor = Utils_1.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n        p1.size.value -= factor;\n        p2.size.value += factor;\n        if (p1.getRadius() <= container.retina.pixelRatio) {\n          p1.size.value = 0;\n          p1.destroy();\n        }\n      }\n    }\n  }\n}\nexports.Collider = Collider;","map":{"version":3,"names":["Object","defineProperty","exports","value","Collider","Enums_1","require","Utils_1","ParticlesInteractorBase_1","bounce","p1","p2","circleBounce","circleBounceDataFromParticle","destroy","unbreakable","getRadius","undefined","ParticlesInteractorBase","constructor","container","isEnabled","particle","options","collisions","enable","reset","interact","pos1","getPosition","radius1","query","particles","quadTree","queryCircle","mode","destroyed","spawning","pos2","Math","round","z","dist","getDistance","radius2","distP","resolveCollision","CollisionMode","absorb","fps","fpsLimit","factor","clamp","size","retina","pixelRatio"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Interactions/Particles/Collisions/Collider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collider = void 0;\nconst Enums_1 = require(\"../../../Enums\");\nconst Utils_1 = require(\"../../../Utils\");\nconst ParticlesInteractorBase_1 = require(\"../../../Core/ParticlesInteractorBase\");\nfunction bounce(p1, p2) {\n    Utils_1.circleBounce(Utils_1.circleBounceDataFromParticle(p1), Utils_1.circleBounceDataFromParticle(p2));\n}\nfunction destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        if (p1.getRadius() >= p2.getRadius()) {\n            p2.destroy();\n        }\n        else {\n            p1.destroy();\n        }\n    }\n}\nclass Collider extends ParticlesInteractorBase_1.ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n    interact(p1) {\n        const container = this.container;\n        const pos1 = p1.getPosition();\n        const radius1 = p1.getRadius();\n        const query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (Math.round(pos1.z) !== Math.round(pos2.z)) {\n                continue;\n            }\n            const dist = Utils_1.getDistance(pos1, pos2);\n            const radius2 = p2.getRadius();\n            const distP = radius1 + radius2;\n            if (dist <= distP) {\n                this.resolveCollision(p1, p2);\n            }\n        }\n    }\n    resolveCollision(p1, p2) {\n        switch (p1.options.collisions.mode) {\n            case Enums_1.CollisionMode.absorb: {\n                this.absorb(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.bounce: {\n                bounce(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.destroy: {\n                destroy(p1, p2);\n                break;\n            }\n        }\n    }\n    absorb(p1, p2) {\n        const container = this.container;\n        const fps = container.fpsLimit / 1000;\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n            p2.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n            if (p1.getRadius() >= p2.getRadius()) {\n                const factor = Utils_1.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n                p1.size.value += factor;\n                p2.size.value -= factor;\n                if (p2.getRadius() <= container.retina.pixelRatio) {\n                    p2.size.value = 0;\n                    p2.destroy();\n                }\n            }\n            else {\n                const factor = Utils_1.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n                p1.size.value -= factor;\n                p2.size.value += factor;\n                if (p1.getRadius() <= container.retina.pixelRatio) {\n                    p1.size.value = 0;\n                    p1.destroy();\n                }\n            }\n        }\n    }\n}\nexports.Collider = Collider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}