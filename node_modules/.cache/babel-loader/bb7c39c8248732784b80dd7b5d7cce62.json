{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\nvar Utils_1 = require(\"../../Utils\");\nvar Enums_1 = require(\"../../Enums\");\nvar Utils_2 = require(\"./Utils\");\nvar OutOfCanvasUpdater = /*#__PURE__*/function () {\n  function OutOfCanvasUpdater(container) {\n    _classCallCheck(this, OutOfCanvasUpdater);\n    this.container = container;\n  }\n  _createClass(OutOfCanvasUpdater, [{\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed && !particle.spawning;\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      var _a, _b, _c, _d;\n      var outModes = particle.options.move.outModes;\n      this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n      this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n      this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n      this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(particle, delta, outMode, direction) {\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n        case Enums_1.OutMode.split:\n          this.bounce(particle, delta, direction, outMode);\n          break;\n        case Enums_1.OutMode.destroy:\n          this.destroy(particle, direction);\n          break;\n        case Enums_1.OutMode.out:\n          this.out(particle, direction);\n          break;\n        case Enums_1.OutMode.none:\n        default:\n          this.none(particle, direction);\n          break;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(particle, direction) {\n      var container = this.container;\n      if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        return;\n      }\n      container.particles.remove(particle, undefined, true);\n    }\n  }, {\n    key: \"out\",\n    value: function out(particle, direction) {\n      var container = this.container;\n      if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        return;\n      }\n      var wrap = particle.options.move.warp,\n        canvasSize = container.canvas.size,\n        newPos = {\n          bottom: canvasSize.height + particle.offset.y,\n          left: -particle.offset.x,\n          right: canvasSize.width + particle.offset.x,\n          top: -particle.offset.y\n        },\n        sizeValue = particle.getRadius(),\n        nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n      if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n        particle.position.x = newPos.left;\n        particle.initialPosition.x = particle.position.x;\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n          particle.initialPosition.y = particle.position.y;\n        }\n      } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n        particle.initialPosition.x = particle.position.x;\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n          particle.initialPosition.y = particle.position.y;\n        }\n      }\n      if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n          particle.initialPosition.x = particle.position.x;\n        }\n        particle.position.y = newPos.top;\n        particle.initialPosition.y = particle.position.y;\n      } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n          particle.initialPosition.x = particle.position.x;\n        }\n        particle.position.y = newPos.bottom;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce(particle, delta, direction, outMode) {\n      var container = this.container;\n      var handled = false;\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (handled) {\n        return;\n      }\n      var pos = particle.getPosition(),\n        offset = particle.offset,\n        size = particle.getRadius(),\n        bounds = Utils_1.calculateBounds(pos, size),\n        canvasSize = container.canvas.size;\n      Utils_2.bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      Utils_2.bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"none\",\n    value: function none(particle, direction) {\n      if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n        return;\n      }\n      var gravityOptions = particle.options.move.gravity,\n        container = this.container;\n      if (!gravityOptions.enable) {\n        if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n        if (!gravityOptions.inverse && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n  return OutOfCanvasUpdater;\n}();\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":{"version":3,"names":["Object","defineProperty","exports","value","OutOfCanvasUpdater","Utils_1","require","Enums_1","Utils_2","container","particle","destroyed","spawning","delta","_a","_b","_c","_d","outModes","options","move","updateOutMode","bottom","default","OutModeDirection","left","right","top","outMode","direction","OutMode","bounce","bounceVertical","bounceHorizontal","split","destroy","out","none","isPointInside","position","canvas","size","getRadius","particles","remove","undefined","wrap","warp","canvasSize","newPos","height","offset","y","x","width","sizeValue","nextBounds","calculateBounds","initialPosition","Math","random","handled","plugins","plugin","particleBounce","pos","getPosition","bounds","distance","horizontal","vertical","gravityOptions","gravity","enable","inverse"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Updaters/OutModes/OutOfCanvasUpdater.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.bounce(particle, delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                this.destroy(particle, direction);\n                break;\n            case Enums_1.OutMode.out:\n                this.out(particle, direction);\n                break;\n            case Enums_1.OutMode.none:\n            default:\n                this.none(particle, direction);\n                break;\n        }\n    }\n    destroy(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n    out(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n            bottom: canvasSize.height + particle.offset.y,\n            left: -particle.offset.x,\n            right: canvasSize.width + particle.offset.x,\n            top: -particle.offset.y,\n        }, sizeValue = particle.getRadius(), nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n            particle.position.x = newPos.left;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.top;\n            particle.initialPosition.y = particle.position.y;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.bottom;\n            particle.initialPosition.y = particle.position.y;\n        }\n    }\n    bounce(particle, delta, direction, outMode) {\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        Utils_2.bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        Utils_2.bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    none(particle, direction) {\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,IAAMC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,IAAMC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;AACtC,IAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAAC,IAC7BF,kBAAkB;EACpB,4BAAYK,SAAS,EAAE;IAAA;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EAAC;IAAA;IAAA,OACD,mBAAUC,QAAQ,EAAE;MAChB,OAAO,CAACA,QAAQ,CAACC,SAAS,IAAI,CAACD,QAAQ,CAACE,QAAQ;IACpD;EAAC;IAAA;IAAA,OACD,gBAAOF,QAAQ,EAAEG,KAAK,EAAE;MACpB,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;MAClB,IAAMC,QAAQ,GAAGR,QAAQ,CAACS,OAAO,CAACC,IAAI,CAACF,QAAQ;MAC/C,IAAI,CAACG,aAAa,CAACX,QAAQ,EAAEG,KAAK,EAAE,CAACC,EAAE,GAAGI,QAAQ,CAACI,MAAM,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGI,QAAQ,CAACK,OAAO,EAAEhB,OAAO,CAACiB,gBAAgB,CAACF,MAAM,CAAC;MAC9I,IAAI,CAACD,aAAa,CAACX,QAAQ,EAAEG,KAAK,EAAE,CAACE,EAAE,GAAGG,QAAQ,CAACO,IAAI,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGG,QAAQ,CAACK,OAAO,EAAEhB,OAAO,CAACiB,gBAAgB,CAACC,IAAI,CAAC;MAC1I,IAAI,CAACJ,aAAa,CAACX,QAAQ,EAAEG,KAAK,EAAE,CAACG,EAAE,GAAGE,QAAQ,CAACQ,KAAK,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGE,QAAQ,CAACK,OAAO,EAAEhB,OAAO,CAACiB,gBAAgB,CAACE,KAAK,CAAC;MAC5I,IAAI,CAACL,aAAa,CAACX,QAAQ,EAAEG,KAAK,EAAE,CAACI,EAAE,GAAGC,QAAQ,CAACS,GAAG,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGC,QAAQ,CAACK,OAAO,EAAEhB,OAAO,CAACiB,gBAAgB,CAACG,GAAG,CAAC;IAC5I;EAAC;IAAA;IAAA,OACD,uBAAcjB,QAAQ,EAAEG,KAAK,EAAEe,OAAO,EAAEC,SAAS,EAAE;MAC/C,QAAQD,OAAO;QACX,KAAKrB,OAAO,CAACuB,OAAO,CAACC,MAAM;QAC3B,KAAKxB,OAAO,CAACuB,OAAO,CAACE,cAAc;QACnC,KAAKzB,OAAO,CAACuB,OAAO,CAACG,gBAAgB;QACrC,KAAK,gBAAgB;QACrB,KAAK,kBAAkB;QACvB,KAAK1B,OAAO,CAACuB,OAAO,CAACI,KAAK;UACtB,IAAI,CAACH,MAAM,CAACrB,QAAQ,EAAEG,KAAK,EAAEgB,SAAS,EAAED,OAAO,CAAC;UAChD;QACJ,KAAKrB,OAAO,CAACuB,OAAO,CAACK,OAAO;UACxB,IAAI,CAACA,OAAO,CAACzB,QAAQ,EAAEmB,SAAS,CAAC;UACjC;QACJ,KAAKtB,OAAO,CAACuB,OAAO,CAACM,GAAG;UACpB,IAAI,CAACA,GAAG,CAAC1B,QAAQ,EAAEmB,SAAS,CAAC;UAC7B;QACJ,KAAKtB,OAAO,CAACuB,OAAO,CAACO,IAAI;QACzB;UACI,IAAI,CAACA,IAAI,CAAC3B,QAAQ,EAAEmB,SAAS,CAAC;UAC9B;MAAM;IAElB;EAAC;IAAA;IAAA,OACD,iBAAQnB,QAAQ,EAAEmB,SAAS,EAAE;MACzB,IAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAIJ,OAAO,CAACiC,aAAa,CAAC5B,QAAQ,CAAC6B,QAAQ,EAAE9B,SAAS,CAAC+B,MAAM,CAACC,IAAI,EAAE/B,QAAQ,CAACgC,SAAS,EAAE,EAAEb,SAAS,CAAC,EAAE;QAClG;MACJ;MACApB,SAAS,CAACkC,SAAS,CAACC,MAAM,CAAClC,QAAQ,EAAEmC,SAAS,EAAE,IAAI,CAAC;IACzD;EAAC;IAAA;IAAA,OACD,aAAInC,QAAQ,EAAEmB,SAAS,EAAE;MACrB,IAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAIJ,OAAO,CAACiC,aAAa,CAAC5B,QAAQ,CAAC6B,QAAQ,EAAE9B,SAAS,CAAC+B,MAAM,CAACC,IAAI,EAAE/B,QAAQ,CAACgC,SAAS,EAAE,EAAEb,SAAS,CAAC,EAAE;QAClG;MACJ;MACA,IAAMiB,IAAI,GAAGpC,QAAQ,CAACS,OAAO,CAACC,IAAI,CAAC2B,IAAI;QAAEC,UAAU,GAAGvC,SAAS,CAAC+B,MAAM,CAACC,IAAI;QAAEQ,MAAM,GAAG;UAClF3B,MAAM,EAAE0B,UAAU,CAACE,MAAM,GAAGxC,QAAQ,CAACyC,MAAM,CAACC,CAAC;UAC7C3B,IAAI,EAAE,CAACf,QAAQ,CAACyC,MAAM,CAACE,CAAC;UACxB3B,KAAK,EAAEsB,UAAU,CAACM,KAAK,GAAG5C,QAAQ,CAACyC,MAAM,CAACE,CAAC;UAC3C1B,GAAG,EAAE,CAACjB,QAAQ,CAACyC,MAAM,CAACC;QAC1B,CAAC;QAAEG,SAAS,GAAG7C,QAAQ,CAACgC,SAAS,EAAE;QAAEc,UAAU,GAAGnD,OAAO,CAACoD,eAAe,CAAC/C,QAAQ,CAAC6B,QAAQ,EAAEgB,SAAS,CAAC;MACvG,IAAI1B,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACE,KAAK,IAAI8B,UAAU,CAAC/B,IAAI,GAAGuB,UAAU,CAACM,KAAK,GAAG5C,QAAQ,CAACyC,MAAM,CAACE,CAAC,EAAE;QACxG3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC,GAAGJ,MAAM,CAACxB,IAAI;QACjCf,QAAQ,CAACgD,eAAe,CAACL,CAAC,GAAG3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC;QAChD,IAAI,CAACP,IAAI,EAAE;UACPpC,QAAQ,CAAC6B,QAAQ,CAACa,CAAC,GAAGO,IAAI,CAACC,MAAM,EAAE,GAAGZ,UAAU,CAACE,MAAM;UACvDxC,QAAQ,CAACgD,eAAe,CAACN,CAAC,GAAG1C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC;QACpD;MACJ,CAAC,MACI,IAAIvB,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACC,IAAI,IAAI+B,UAAU,CAAC9B,KAAK,GAAG,CAAChB,QAAQ,CAACyC,MAAM,CAACE,CAAC,EAAE;QAC3F3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC,GAAGJ,MAAM,CAACvB,KAAK;QAClChB,QAAQ,CAACgD,eAAe,CAACL,CAAC,GAAG3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC;QAChD,IAAI,CAACP,IAAI,EAAE;UACPpC,QAAQ,CAAC6B,QAAQ,CAACa,CAAC,GAAGO,IAAI,CAACC,MAAM,EAAE,GAAGZ,UAAU,CAACE,MAAM;UACvDxC,QAAQ,CAACgD,eAAe,CAACN,CAAC,GAAG1C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC;QACpD;MACJ;MACA,IAAIvB,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACF,MAAM,IAAIkC,UAAU,CAAC7B,GAAG,GAAGqB,UAAU,CAACE,MAAM,GAAGxC,QAAQ,CAACyC,MAAM,CAACC,CAAC,EAAE;QACzG,IAAI,CAACN,IAAI,EAAE;UACPpC,QAAQ,CAAC6B,QAAQ,CAACc,CAAC,GAAGM,IAAI,CAACC,MAAM,EAAE,GAAGZ,UAAU,CAACM,KAAK;UACtD5C,QAAQ,CAACgD,eAAe,CAACL,CAAC,GAAG3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC;QACpD;QACA3C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC,GAAGH,MAAM,CAACtB,GAAG;QAChCjB,QAAQ,CAACgD,eAAe,CAACN,CAAC,GAAG1C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC;MACpD,CAAC,MACI,IAAIvB,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACG,GAAG,IAAI6B,UAAU,CAAClC,MAAM,GAAG,CAACZ,QAAQ,CAACyC,MAAM,CAACC,CAAC,EAAE;QAC3F,IAAI,CAACN,IAAI,EAAE;UACPpC,QAAQ,CAAC6B,QAAQ,CAACc,CAAC,GAAGM,IAAI,CAACC,MAAM,EAAE,GAAGZ,UAAU,CAACM,KAAK;UACtD5C,QAAQ,CAACgD,eAAe,CAACL,CAAC,GAAG3C,QAAQ,CAAC6B,QAAQ,CAACc,CAAC;QACpD;QACA3C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC,GAAGH,MAAM,CAAC3B,MAAM;QACnCZ,QAAQ,CAACgD,eAAe,CAACN,CAAC,GAAG1C,QAAQ,CAAC6B,QAAQ,CAACa,CAAC;MACpD;IACJ;EAAC;IAAA;IAAA,OACD,gBAAO1C,QAAQ,EAAEG,KAAK,EAAEgB,SAAS,EAAED,OAAO,EAAE;MACxC,IAAMnB,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAIoD,OAAO,GAAG,KAAK;MAAC,2CACKpD,SAAS,CAACqD,OAAO;QAAA;MAAA;QAA1C,oDAA4C;UAAA;YAA9BC,MAAM;UAChB,IAAIA,MAAM,CAACC,cAAc,KAAKnB,SAAS,EAAE;YACrCgB,OAAO,GAAGE,MAAM,CAACC,cAAc,CAACtD,QAAQ,EAAEG,KAAK,EAAEgB,SAAS,CAAC;UAC/D;UACA,IAAIgC,OAAO,EAAE;YACT;UACJ;QACJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAIA,OAAO,EAAE;QACT;MACJ;MACA,IAAMI,GAAG,GAAGvD,QAAQ,CAACwD,WAAW,EAAE;QAAEf,MAAM,GAAGzC,QAAQ,CAACyC,MAAM;QAAEV,IAAI,GAAG/B,QAAQ,CAACgC,SAAS,EAAE;QAAEyB,MAAM,GAAG9D,OAAO,CAACoD,eAAe,CAACQ,GAAG,EAAExB,IAAI,CAAC;QAAEO,UAAU,GAAGvC,SAAS,CAAC+B,MAAM,CAACC,IAAI;MAC1KjC,OAAO,CAACyB,gBAAgB,CAAC;QAAEvB,QAAQ,EAARA,QAAQ;QAAEkB,OAAO,EAAPA,OAAO;QAAEC,SAAS,EAATA,SAAS;QAAEsC,MAAM,EAANA,MAAM;QAAEnB,UAAU,EAAVA,UAAU;QAAEG,MAAM,EAANA,MAAM;QAAEV,IAAI,EAAJA;MAAK,CAAC,CAAC;MAC5FjC,OAAO,CAACwB,cAAc,CAAC;QAAEtB,QAAQ,EAARA,QAAQ;QAAEkB,OAAO,EAAPA,OAAO;QAAEC,SAAS,EAATA,SAAS;QAAEsC,MAAM,EAANA,MAAM;QAAEnB,UAAU,EAAVA,UAAU;QAAEG,MAAM,EAANA,MAAM;QAAEV,IAAI,EAAJA;MAAK,CAAC,CAAC;IAC9F;EAAC;IAAA;IAAA,OACD,cAAK/B,QAAQ,EAAEmB,SAAS,EAAE;MACtB,IAAKnB,QAAQ,CAACS,OAAO,CAACC,IAAI,CAACgD,QAAQ,CAACC,UAAU,KACzCxC,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACC,IAAI,IAAII,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACE,KAAK,CAAC,IAC5FhB,QAAQ,CAACS,OAAO,CAACC,IAAI,CAACgD,QAAQ,CAACE,QAAQ,KACnCzC,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACG,GAAG,IAAIE,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACF,MAAM,CAAE,EAAE;QACpG;MACJ;MACA,IAAMiD,cAAc,GAAG7D,QAAQ,CAACS,OAAO,CAACC,IAAI,CAACoD,OAAO;QAAE/D,SAAS,GAAG,IAAI,CAACA,SAAS;MAChF,IAAI,CAAC8D,cAAc,CAACE,MAAM,EAAE;QACxB,IAAI,CAACpE,OAAO,CAACiC,aAAa,CAAC5B,QAAQ,CAAC6B,QAAQ,EAAE9B,SAAS,CAAC+B,MAAM,CAACC,IAAI,EAAE/B,QAAQ,CAACgC,SAAS,EAAE,EAAEb,SAAS,CAAC,EAAE;UACnGpB,SAAS,CAACkC,SAAS,CAACC,MAAM,CAAClC,QAAQ,CAAC;QACxC;MACJ,CAAC,MACI;QACD,IAAM6B,QAAQ,GAAG7B,QAAQ,CAAC6B,QAAQ;QAClC,IAAK,CAACgC,cAAc,CAACG,OAAO,IACxBnC,QAAQ,CAACa,CAAC,GAAG3C,SAAS,CAAC+B,MAAM,CAACC,IAAI,CAACS,MAAM,IACzCrB,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACF,MAAM,IAC5CiD,cAAc,CAACG,OAAO,IAAInC,QAAQ,CAACa,CAAC,GAAG,CAAC,IAAIvB,SAAS,KAAKtB,OAAO,CAACiB,gBAAgB,CAACG,GAAI,EAAE;UAC1FlB,SAAS,CAACkC,SAAS,CAACC,MAAM,CAAClC,QAAQ,CAAC;QACxC;MACJ;IACJ;EAAC;EAAA;AAAA;AAELR,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script"}