{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nvar Enums_1 = require(\"./Enums\");\nvar Utils_1 = require(\"../../Utils\");\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nvar Enums_2 = require(\"../../Enums\");\nfunction drawPolygonMask(context, rawData, stroke) {\n  var color = Utils_1.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n  var _iterator = _createForOfIteratorHelper(rawData),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      context.lineTo(item.x, item.y);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  context.closePath();\n  context.strokeStyle = Utils_1.getStyleFromRgb(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  var color = Utils_1.colorToRgb(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.strokeStyle = Utils_1.getStyleFromRgb(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n  var res = [];\n  var _iterator2 = _createForOfIteratorHelper(paths),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var path = _step2.value;\n      var segments = path.element.pathSegList;\n      var len = segments.numberOfItems;\n      var p = {\n        x: 0,\n        y: 0\n      };\n      for (var i = 0; i < len; i++) {\n        var segment = segments.getItem(i);\n        var svgPathSeg = window.SVGPathSeg;\n        switch (segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              var absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              var relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  var _Utils_1$getDistances = Utils_1.getDistances(pos, s1),\n    dx = _Utils_1$getDistances.dx,\n    dy = _Utils_1$getDistances.dy;\n  var _Utils_1$getDistances2 = Utils_1.getDistances(s2, s1),\n    dxx = _Utils_1$getDistances2.dx,\n    dyy = _Utils_1$getDistances2.dy;\n  var t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n  var x = s1.x + dxx * t;\n  var y = s1.y + dyy * t;\n  if (t < 0) {\n    x = s1.x;\n    y = s1.y;\n  } else if (t > 1) {\n    x = s2.x;\n    y = s2.y;\n  }\n  return {\n    x: x,\n    y: y,\n    isOnSegment: t >= 0 && t <= 1\n  };\n}\nfunction segmentBounce(start, stop, velocity) {\n  var _Utils_1$getDistances3 = Utils_1.getDistances(start, stop),\n    dx = _Utils_1$getDistances3.dx,\n    dy = _Utils_1$getDistances3.dy;\n  var wallAngle = Math.atan2(dy, dx);\n  var wallNormalX = Math.sin(wallAngle);\n  var wallNormalY = -Math.cos(wallAngle);\n  var d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n  velocity.x -= d * wallNormalX;\n  velocity.y -= d * wallNormalY;\n}\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function initAsync(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 6;\n                return this.initRawData();\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container;\n      var options = this.options;\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this.initRawData(true);\n                case 2:\n                  container.particles.redraw();\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }, 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return Utils_1.deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options;\n      var polygonDraw = options.draw;\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var path2d = path.path2d;\n          var path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n        return false;\n      }\n      if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = Utils_1.getDistances(pos, closest);\n          var _ref = [dist.dx, dist.dy];\n          dx = _ref[0];\n          dy = _ref[1];\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n        var _dist = Utils_1.getDistance(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container;\n      var options = this.options;\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size;\n      var x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      var y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i];\n        var pj = this.raw[j];\n        var intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container;\n      var options = this.options;\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(xml, \"image/svg+xml\");\n      var svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio;\n      var scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function downloadSvgPath(svgUrl, force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options;\n                url = svgUrl || options.url;\n                forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 5;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.raw);\n              case 5:\n                _context3.next = 7;\n                return fetch(url);\n              case 7:\n                req = _context3.sent;\n                if (req.ok) {\n                  _context3.next = 10;\n                  break;\n                }\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n              case 10:\n                _context3.t0 = this;\n                _context3.next = 13;\n                return req.text();\n              case 13:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.raw),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container;\n      var options = this.options;\n      var position;\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = Utils_1.itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var path = Utils_1.itemFromArray(this.paths);\n      var distance = Math.floor(Math.random() * path.length) + 1;\n      var point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions;\n      var polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      var offset = 0;\n      var point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0);\n      var distance = totalLength / options.particles.number.value;\n      var _iterator5 = _createForOfIteratorHelper(this.paths),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var path = _step5.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator6 = _createForOfIteratorHelper(this.paths),\n        _step6;\n      try {\n        var _loop = function _loop() {\n          var path = _step6.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData);\n            var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n            var finalPath = new Path2D();\n            var transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function initRawData(force) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n              case 7:\n                if (options.data) {\n                  data = options.data;\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n              case 8:\n                this.createPath2D();\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n  return PolygonMaskInstance;\n}();\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","Enums_2","drawPolygonMask","context","rawData","stroke","color","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPtOnSegment","s1","s2","pos","getDistances","dx","dy","dxx","dyy","t","Math","pow","isOnSegment","segmentBounce","start","stop","velocity","wallAngle","atan2","wallNormalX","sin","wallNormalY","cos","d","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","_a","_b","length","deepExtend","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","polygonDraw","draw","path2d","path2dSupported","OutModeDirection","top","inside","outside","closest","getPosition","getRadius","j","pi","pj","dist","distance","undefined","factor","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","random","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","downloadSvgPath","data","Array","map","join","namespaces","createPath2D"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst Enums_2 = require(\"../../Enums\");\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = Utils_1.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.colorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = Utils_1.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nfunction parsePaths(paths, scale, offset) {\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList;\n        const len = segments.numberOfItems;\n        const p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = Utils_1.getDistances(pos, s1);\n    const { dx: dxx, dy: dyy } = Utils_1.getDistances(s2, s1);\n    const t = (dx * dxx + dy * dyy) / (Math.pow(dxx, 2) + Math.pow(dyy, 2));\n    let x = s1.x + dxx * t;\n    let y = s1.y + dyy * t;\n    if (t < 0) {\n        x = s1.x;\n        y = s1.y;\n    }\n    else if (t > 1) {\n        x = s2.x;\n        y = s2.y;\n    }\n    return { x: x, y: y, isOnSegment: t >= 0 && t <= 1 };\n}\nfunction segmentBounce(start, stop, velocity) {\n    const { dx, dy } = Utils_1.getDistances(start, stop);\n    const wallAngle = Math.atan2(dy, dx);\n    const wallNormalX = Math.sin(wallAngle);\n    const wallNormalY = -Math.cos(wallAngle);\n    const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n    velocity.x -= d * wallNormalX;\n    velocity.y -= d * wallNormalY;\n}\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    initAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return Utils_1.deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n            return false;\n        }\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = Utils_1.getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}