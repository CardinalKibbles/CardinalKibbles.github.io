{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning;\n  }\n  update(particle, delta) {\n    var _a, _b, _c, _d;\n    const outModes = particle.options.move.outModes;\n    this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n  updateOutMode(particle, delta, outMode, direction) {\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.bounce(particle, delta, direction, outMode);\n        break;\n      case Enums_1.OutMode.destroy:\n        this.destroy(particle, direction);\n        break;\n      case Enums_1.OutMode.out:\n        this.out(particle, direction);\n        break;\n      case Enums_1.OutMode.none:\n      default:\n        this.none(particle, direction);\n        break;\n    }\n  }\n  destroy(particle, direction) {\n    const container = this.container;\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n    container.particles.remove(particle, undefined, true);\n  }\n  out(particle, direction) {\n    const container = this.container;\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n    const wrap = particle.options.move.warp,\n      canvasSize = container.canvas.size,\n      newPos = {\n        bottom: canvasSize.height + particle.offset.y,\n        left: -particle.offset.x,\n        right: canvasSize.width + particle.offset.x,\n        top: -particle.offset.y\n      },\n      sizeValue = particle.getRadius(),\n      nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n      particle.position.x = newPos.left;\n      particle.initialPosition.x = particle.position.x;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      particle.initialPosition.x = particle.position.x;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n      particle.position.y = newPos.top;\n      particle.initialPosition.y = particle.position.y;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n      particle.position.y = newPos.bottom;\n      particle.initialPosition.y = particle.position.y;\n    }\n  }\n  bounce(particle, delta, direction, outMode) {\n    const container = this.container;\n    let handled = false;\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n      if (handled) {\n        break;\n      }\n    }\n    if (handled) {\n      return;\n    }\n    const pos = particle.getPosition(),\n      offset = particle.offset,\n      size = particle.getRadius(),\n      bounds = Utils_1.calculateBounds(pos, size),\n      canvasSize = container.canvas.size;\n    Utils_2.bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    Utils_2.bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n  none(particle, direction) {\n    if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n      return;\n    }\n    const gravityOptions = particle.options.move.gravity,\n      container = this.container;\n    if (!gravityOptions.enable) {\n      if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n      if (!gravityOptions.inverse && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":{"version":3,"names":["Object","defineProperty","exports","value","OutOfCanvasUpdater","Utils_1","require","Enums_1","Utils_2","constructor","container","isEnabled","particle","destroyed","spawning","update","delta","_a","_b","_c","_d","outModes","options","move","updateOutMode","bottom","default","OutModeDirection","left","right","top","outMode","direction","OutMode","bounce","bounceVertical","bounceHorizontal","split","destroy","out","none","isPointInside","position","canvas","size","getRadius","particles","remove","undefined","wrap","warp","canvasSize","newPos","height","offset","y","x","width","sizeValue","nextBounds","calculateBounds","initialPosition","Math","random","handled","plugin","plugins","particleBounce","pos","getPosition","bounds","distance","horizontal","vertical","gravityOptions","gravity","enable","inverse"],"sources":["C:/Users/Tyler Giles/Documents/GitHub/Personal_Site/node_modules/tsparticles/Updaters/OutModes/OutOfCanvasUpdater.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.bounce(particle, delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                this.destroy(particle, direction);\n                break;\n            case Enums_1.OutMode.out:\n                this.out(particle, direction);\n                break;\n            case Enums_1.OutMode.none:\n            default:\n                this.none(particle, direction);\n                break;\n        }\n    }\n    destroy(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n    out(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n            bottom: canvasSize.height + particle.offset.y,\n            left: -particle.offset.x,\n            right: canvasSize.width + particle.offset.x,\n            top: -particle.offset.y,\n        }, sizeValue = particle.getRadius(), nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n            particle.position.x = newPos.left;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.top;\n            particle.initialPosition.y = particle.position.y;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.bottom;\n            particle.initialPosition.y = particle.position.y;\n        }\n    }\n    bounce(particle, delta, direction, outMode) {\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        Utils_2.bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        Utils_2.bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    none(particle, direction) {\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}